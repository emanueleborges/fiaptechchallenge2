#!/usr/bin/env python3
"""
Script de teste para verificar o sistema de configura√ß√£o .env
"""

def test_config_system():
    """Testa o sistema de configura√ß√£o"""
    print("üß™ TESTANDO SISTEMA DE CONFIGURA√á√ÉO")
    print("=" * 50)
    
    try:
        # Teste 1: Importar m√≥dulo config
        print("1Ô∏è‚É£ Testando importa√ß√£o do m√≥dulo config...")
        from config import config
        print("‚úÖ M√≥dulo config importado com sucesso")
        
        # Teste 2: Verificar se .env existe
        print("\n2Ô∏è‚É£ Verificando arquivo .env...")
        from pathlib import Path
        env_file = Path('.env')
        
        if env_file.exists():
            print("‚úÖ Arquivo .env encontrado")
        else:
            print("‚ö†Ô∏è  Arquivo .env n√£o encontrado")
            print("üí° Execute 'python configure_aws.py' para cri√°-lo")
            return False
        
        # Teste 3: Acessar configura√ß√µes
        print("\n3Ô∏è‚É£ Testando acesso √†s configura√ß√µes...")
        
        config_tests = [
            ("AWS Region", config.aws_region),
            ("S3 Bucket Name", config.s3_bucket_name),
            ("API Port", config.api_port),
            ("API Host", config.api_host),
            ("Project Name", config.project_name),
            ("Environment", config.environment),
        ]
        
        for name, value in config_tests:
            print(f"   ‚Ä¢ {name}: {value}")
        
        print("‚úÖ Configura√ß√µes acessadas com sucesso")
        
        # Teste 4: Validar configura√ß√µes AWS (apenas estrutura)
        print("\n4Ô∏è‚É£ Testando valida√ß√£o de configura√ß√µes AWS...")
        try:
            validation_result = config.validate_aws_config()
            if validation_result:
                print("‚úÖ Configura√ß√µes AWS v√°lidas")
            else:
                print("‚ö†Ô∏è  Configura√ß√µes AWS incompletas")
                print("üí° Execute 'python configure_aws.py' para configurar")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro na valida√ß√£o: {e}")
        
        # Teste 5: Testar par√¢metros boto3
        print("\n5Ô∏è‚É£ Testando par√¢metros para boto3...")
        try:
            boto3_params = config.get_boto3_session_kwargs()
            print(f"   ‚Ä¢ Par√¢metros gerados: {list(boto3_params.keys())}")
            print("‚úÖ Par√¢metros boto3 gerados com sucesso")
        except Exception as e:
            print(f"‚ùå Erro ao gerar par√¢metros boto3: {e}")
        
        print("\nüéâ TESTE COMPLETO!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulo config: {e}")
        print("üí° Certifique-se de que o arquivo config.py existe")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False


def test_env_loading():
    """Testa carregamento manual do .env"""
    print("\nüîß TESTE DE CARREGAMENTO MANUAL DO .ENV")
    print("=" * 50)
    
    try:
        from config import load_env_file
        import os
        
        # Salvar estado original das vari√°veis
        original_env = dict(os.environ)
        
        # Limpar algumas vari√°veis para teste
        test_vars = ['AWS_REGION', 'S3_BUCKET_NAME', 'PROJECT_NAME']
        for var in test_vars:
            if var in os.environ:
                del os.environ[var]
        
        print("1Ô∏è‚É£ Vari√°veis limpas para teste")
        
        # Carregar .env
        load_env_file()
        
        # Verificar se vari√°veis foram carregadas
        loaded_vars = []
        for var in test_vars:
            if var in os.environ:
                loaded_vars.append(var)
                print(f"   ‚úÖ {var} = {os.environ[var]}")
        
        print(f"\n‚úÖ {len(loaded_vars)} vari√°veis carregadas com sucesso")
        
        # Restaurar estado original
        os.environ.clear()
        os.environ.update(original_env)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de carregamento: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ INICIANDO TESTES DO SISTEMA DE CONFIGURA√á√ÉO")
    print("=" * 60)
    
    # Executar testes
    success = True
    
    try:
        if not test_config_system():
            success = False
        
        if not test_env_loading():
            success = False
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Testes interrompidos pelo usu√°rio")
        success = False
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema de configura√ß√£o est√° funcionando corretamente")
        print("\nüí° Pr√≥ximos passos:")
        print("   ‚Ä¢ Execute 'python configure_aws.py' para configurar AWS")
        print("   ‚Ä¢ Execute 'python main.py' para testar o pipeline")
        print("   ‚Ä¢ Execute 'python api_server.py' para iniciar a API")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("üí° Verifique os erros acima e corrija antes de continuar")
    
    print("=" * 60)
